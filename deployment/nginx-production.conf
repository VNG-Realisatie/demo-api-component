
# https://www.nginx.com/blog/nginx-caching-guide/

proxy_cache_path /tmp/nginx_cache_{{ project_name }}_{{ target }} levels=1:2 keys_zone=cache_{{ project_name }}_{{ target }}:500m;

# Depending on the domainname, you might instead want to redirect
# port 80 -> www.{{ nginx_server_name }} and
# port 443 {{ nginx_server_name }} -> www.{{ nginx_server_name }}


server {
    server_tokens off;
    listen 80;
    server_name {{ nginx_server_name }} www.{{ nginx_server_name }};
    rewrite ^ https://{{ nginx_server_name }}$request_uri?;
}

server {
    server_tokens off;
    listen 443 http2 ssl;
    server_name {{ nginx_server_name }} www.{{ nginx_server_name }};
    client_max_body_size 4G;

    # Enable Gzip, from html5-boilerplate-server-configs
    gzip  on;
    gzip_http_version 1.0;
    gzip_comp_level 2;
    gzip_min_length 1100;
    gzip_buffers     4 8k;
    gzip_proxied any;
    gzip_types

      # text/html is always compressed by HttpGzipModule
      text/css
      text/javascript
      text/xml
      text/plain
      text/x-component
      application/javascript
      application/json
      application/xml
      application/rss+xml
      font/truetype
      font/opentype
      application/vnd.ms-fontobject
      image/svg+xml;

    gzip_static on;

    gzip_proxied        expired no-cache no-store private auth;
    gzip_disable        "MSIE [1-6]\.";
    gzip_vary           on;

    ssl_protocols TLSv1 TLSv1.1 TLSv1.2; # Disable SSLv3 for security reasons
    ssl_session_timeout 1d;
    ssl_session_cache shared:SSL:50m;

    ssl_ciphers 'ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:!DSS';

    ssl_prefer_server_ciphers on;
    ssl_dhparam /etc/ssl/certs/dhparam.pem;

    add_header Strict-Transport-Security max-age=15768000;
    add_header X-XSS-Protection "1; mode=block";
    add_header X-Content-Type-Options nosniff;

    ssl on;

    # Note: If using a certificate bundle ensure that the _first_ certificate
    # in the bundle corresponds with the private key.

    ssl_certificate /etc/ssl/sites/{{ nginx_server_name }}.crt;
    ssl_certificate_key /etc/ssl/sites/{{ nginx_server_name }}.key;

    access_log {{ nginx_access_log_file }};
    error_log {{ nginx_error_log_file }} info;


    # Check if maintenance mode is active
    set $maintenance off;
    if (-f {{ project_root }}/maintenance.html ) {
        set $maintenance on;
    }
    if ($maintenance = on) {
        return 503;
    }

    location /static/ {
        # Make sure that STATICFILES_STORAGE setting is set to:
        # 'django.contrib.staticfiles.storage.ManifestStaticFilesStorage'
        # See: https://docs.djangoproject.com/en/1.11/ref/contrib/staticfiles/#manifeststaticfilesstorage
        expires 1h;
        alias {{ nginx_static_dir }};
    }

    location /media/ {
        expires 1d;
        alias {{ nginx_media_dir }};
    }

    location / {
        # Setup var defaults. Explicitly set this flag to an empty string to enable caching
        set $no_cache "1";
        # If non GET/HEAD, don't cache & mark user as uncacheable for 1 second via cookie
        if ($request_method !~ ^(GET|HEAD)$) {
            set $no_cache "1";
        }
        # Drop no cache cookie if need be
        # (for some reason, add_header fails if included in prior if-block)
        if ($no_cache = "1") {
            add_header Set-Cookie "_mcnc=1; Max-Age=2; Path=/";
            add_header X-Microcachable "0";
        }
        # Bypass cache if no-cache cookie is set
        if ($http_cookie ~* "_mcnc") {
            set $no_cache "1";
        }
        # Bypass cache if flag is set
        proxy_no_cache $no_cache;
        proxy_cache_bypass $no_cache;
        proxy_cache_bypass $cookie_sessionid; # Don't cache if we're authenticated
        proxy_cache cache_{{ project_name }}_{{ target }};
        proxy_cache_valid 200 1m;
        proxy_cache_key $scheme$host$request_method$request_uri;
        proxy_cache_use_stale error updating timeout http_500 http_502 http_503 http_504;

        proxy_pass_header Server;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Host $server_name;
        proxy_set_header X-Scheme $scheme;
        proxy_connect_timeout 300s;
        proxy_read_timeout 300s;

        proxy_set_header Host $http_host;
        proxy_redirect off;
        proxy_pass_request_headers on;
        proxy_pass http://127.0.0.1:{{ uwsgi_port }};
        add_header X-Cache-Status $upstream_cache_status;
    }

    # Error pages
    error_page 500 502 504 /500.html;
    location = /500.html {
        root {{ project_root }}/src/{{ project_src_dir }}/templates/;
    }

    # Maintenance mode
    error_page 503 @maintenance;
    location @maintenance {
        root {{ project_root }};
        rewrite ^(.*)$ /maintenance.html break;
    }

}
